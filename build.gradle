plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id 'io.freefair.lombok' version '8.6'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        url "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven { // TOP
        url "https://maven.k-4u.nl"
        content {
            includeGroup "mcjty.theoneprobe"
        }
    }
    maven {
        name "Modmaven"
        url "https://modmaven.dev/"
        content {
            includeGroup 'appeng'
            includeGroup 'mekanism'
            includeGroup 'me'
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        url "https://maven.ryanliptak.com/"
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        //systemProperty 'mixin.debug.export', 'true'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    runtimeOnly "dev.emi:emi-neoforge:${emi_version}"

    runtimeOnly "mcjty.theoneprobe:theoneprobe:${top_version}"
    runtimeOnly "appeng:appliedenergistics2-neoforge:${ae2_version}"

    compileOnly "squeek.appleskin:appleskin-neoforge:mc${appleskin_version}:api"
    runtimeOnly "squeek.appleskin:appleskin-neoforge:mc${appleskin_version}"

    implementation "curse.maven:modern-dynamics-552758:5373764" //Modern Industrialization
    implementation "mekanism:Mekanism:${mekanism_version}"// Mekanism
    implementation "mekanism:Mekanism:${mekanism_version}:additions"// Mekanism: Additions
    implementation "mekanism:Mekanism:${mekanism_version}:generators"// Mekanism: Generators
    implementation "mekanism:Mekanism:${mekanism_version}:tools"// Mekanism: Tools

    //runtimeOnly "me.desht.pneumaticcraft:pneumaticcraft-repressurized:${pnc_version}"

    testImplementation(platform("org.junit:junit-bom:${junit_version}"))
    testCompileOnly "org.junit.jupiter:junit-jupiter-api"
    testCompileOnly "org.junit.jupiter:junit-jupiter-params"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
